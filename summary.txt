GitHub repo: https://github.com/Vellyus/blog

Realtime Database url: https://blog-22bf7-default-rtdb.europe-west1.firebasedatabase.app/

05.25

- Létrehoztam az appot + kitöröltem a felesleges file-okat

- Csináltam új Firebase projectet Realtime adatbázissal

- Feltettem a routert + csináltam route-okat ( /home /admin /admin/blog )

05.27

- Megcsináltam a Login és a Register formokat az /admin route-on és beraktam egy gombot amivel lehet őket váltogatni

05.29

- Ugyan nem ide tartozik, de feltettem a Malacka házipénztár appot GitHub Pages-re és raktam bele pár media query-t, hogy telefonon is kinézzen valahogy. Elég sokáig tartott megtalálni, hogy miért nem akar működni, de aztán meglett h a BrowserRouter helyett a HashRoutert szereti a GH Pages.

- Telepítettem a firebase csomagot és csináltam egy függvényt ami lekéri a DB tartalmát

05.30

- Csináltam service könyvtárat, benne külön auth- és blogService file-okkal

- A pages könytáron belül is szeparáltam az admin és blog elementeket

- Külön file-okba szedtem az admin és a blog részhez tartozó route-okat, ezeket betettem egy routes nevű könyvtárba

- Bemásoltam a Firebase docs-ból az auth függvényeket

- A bejelentkező és a regisztráló formon már van state és az input mezőbe íráskor updatel

- Már lehet felhasználót regisztrálni, a form egyelőre csak resetel utána

06.01

- Megcsináltam a context-et és a felhasználó regisztrálása után updatel, jelezve hogy be van jelentkezve
  Id-t nem tároltam, csak true/false toggle van

06.05

- Elvileg megvan a login és a logout is. Remélem mindent úgy csináltam, ahogy kell, de nem vagyok benne biztos :)

- Az admin oldalról átirányít ha sikeres a form submission, a /admin/blog oldalról pedig vissza ha nincs belépve user

06.19

- Töröltem a ref-eket a formokból

06.21

- A főoldalon megjelennek a blog postok, egyelőre stílus nélkül

06.26

- Már lehet új blog postot bevinni, az input mezőket majd később lecserélem textArea-ra, csak gondoltam egyelőre a működésre fókuszálok aztán majd később kiszépítem

- Megint visszaállítottam a default formot a bejelentkezősre, valszeg úgyis az lesz többször használva

06.27

- A blog postok már az adminblog oldalon is megjelennek

- Rájöttem, hogy a tartalom fele angol, a másik fele meg magyar úgyhogy mindent átírtam magyarra

07.09

- Mégis csak kiszépítettem a formokat és lecseréltem textarea-ra a bevezetés és tartalom inputokat.

- Minden bejegyzéshez van egy törlés gomb az adminBlog-ban, egyelőre csak dísznek

- Most már működik a törlés gomb

- A főoldalon minden bejegyzésről levettem a tartalom részt és helyette beraktam egy gombot ami a slug url-re irányít, ahol megtekinthető az egész post. Itt a single post pagen van egy vissza a főoldalra gomb is. A bejelentkezős és regisztrálós formhoz is raktam ilyen vissza gombot.


07.10

- Beraktam egy szerkesztés gombot az adminBlog lapra (még nem működik) + magyarra javítottam a törlés gomb szövegét

- Nagyjából működik a szerkesztés. Ha szerkesztek egy postot, aztán átírok valamit, de mentés helyett visszalépek nem mindig resetel az input értéke. Még dolgozok rajta.

07.20

- Megoldottam a "nem mindig resetel az input a formon visszalépés után" problémát. Az volt a baj, hogy state alapján külön formokat töltöttem be és mire resetelte volna a function az inputok értékét már nem mindig az a form volt renderelve. Most egy form van és state alapján csak a submit function-t cserélem benne.

07.22

- Felraktam a slugify-t és a generált random id helyett most a slug van elmentve id-ként az adatbázisban + a felhasználó is ezen éri el a teljes bejegyzést.

07.28

- A képfeltöltés működik csak még hozzá kell csatolni a bejegyzéshez

07.31

- A bejegyzéshez csatoltam a kép id-jét, de a képet nem mindig tölti fel storage-ba. Valamiért ha submitkor intputból akarom feltölteni csak az tulajdonságait menti és nem magát a képet. Viszont ha state-ből töltöm fel néha még nincs meg a state mire submitelek.

08.01

- Sikerült megoldanom a képfeltöltős problémát

08.11

  1. Volt egy ilyen useEffect, aminek a dep. tömbjét üresre állítottad, de az a blogPosts kell oda, különben nem tűnnek el a törölt postok, csak frissítés után

   useEffect(() => {
    getData(dbUrl).then(data => setBlogPosts(data));
  }, [blogPosts]);

  2. A képfeltöltős function paramétereihez beraktad, hogy ha nincs kép legyen egy string a kép id-je helyett, de ez azt eredményezte, hogy mindig string lett a kép id helyett, gondolom mert idő amíg felrakja a képet state-be és még nem volt elérhető.

  await addOrEditBlogPost(slugify(formData.title, { lower: true, strict: true }), formData.imageId || '', formData.title, formData.lead, formData.body);

  3. Kivettem a refeket

  08.20

  - A form nem resetelt sikeres submit után, ezt most helyrehoztam.

  - Nem tudom mi van, de visszaraktam a képfeltöltős function paramétereihez a stringet ha nincs imageId és most működik...

  08.22

  - 11-én írtam, hogy a useEffect dep. tömbkjébe kell a blogPosts, hogy a törölt cikkek azonnal eltűnjenek, na az mégse kell oda, megoldottam máshogy és így nem renderel újra milliószor a komponens.

  - Képfeltöltéskor a bejegyzésben már a kép downloadURL-je is el van tárolva.

  08.23

  - A szerkesztésből való visszalépéskor nem resetelt a form, ezt javítottam.

  - A szerkesztés most már kezeli a képeket is. Ha üres az input mező akkor hagyja a régit, ha pedig van kép kiválasztva akkor cseréli arra.

  - Mondtad, hogy a handlerben kezeljem le hogy új bejegyzés legyen vagy szerkesztés és ne az onSubmit-ban. Hát nem egészen úgy csináltam, hanem írtam egy harmadik függvényt ami meghívja valamelyiket a state-től függően. Így maradhattak a függvény nevek, nekem így átláthatóbb.

  - Szerkesztéskor az ablak felgörget a tetejére, CSS-ben beállítottam, hogy smooth legyen.

  08.25

  - A szerkesztés nézet kivételével megjelennek a képet a bejegyzésekhez

  08.29

  - Bejegyzés szerkesztésekor ha van kép megjelenik a kép előnézete, de másik kép tallózásánál nem cserélődik, mert a feltöltés form submitnél van. Ha így is jó, akkor így hagyom :)

  08.30

  - A postokat külön komponensbe tettem